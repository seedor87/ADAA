from __future__ import division
import sys, timeit
from random import randint, uniform
import random
from functools import wraps
import matplotlib.pyplot as plt


list_rand_int = lambda Lim, Len, Sign=0: [randint(Sign*Lim,Lim) for x in range(0,Len)]

ordinal = lambda n: "%d%s" % (n,"tsnrhtdd"[(n/10%10!=1)*(n%10<4)*n%10::4]) # toy for interpretation

def wrap_text(text, highlight=None):
    if highlight is None:
        return str(text)
    else:
        return '%s%s%s' %(highlight, text, color.END)

class color:
   PURPLE = '\033[95m'
   CYAN = '\033[96m'
   DARKCYAN = '\033[36m'
   BLUE = '\033[94m'
   GREEN = '\033[92m'
   YELLOW = '\033[93m'
   RED = '\033[91m'
   BOLD = '\033[1m'
   UNDERLINE = '\033[4m'
   END = '\033[0m'

def timer(function):

    @wraps(function)
    def func_timer(*args, **kwargs):
        t0 = timeit.default_timer()
        result = function(*args, **kwargs)
        t1 = timeit.default_timer()
        diff = t1 -t0
        print ("Total time running %s: %s seconds" %(wrap_text(function.func_name, color.DARKCYAN), wrap_text(diff, color.YELLOW)))
        return result, diff
    return func_timer

def exchange(List, a, b):
    temp = List[a]
    List[a] = List[b]
    List[b] = temp

def random_partition(List, p, r) :
    x = p + random.randrange(r - p + 1)
    exchange(List, x, r)
    for j in range(p, r):
        if List[j] <= List[r]:
            exchange(List, j, p)
            p +=1
    exchange(List, p, r)
    return p

@timer
def randomized_select(List, i):
    try:
        start = 0
        end = len(List)-1
        while start < end:
            q = random_partition(List, start, end)
            k = q - start + 1
            if i == k:
                return List[q]
            elif i < k:
                end = q - 1
            else:
                start = q + 1
                i = i - k
        return List[start]
    except Exception as e:
        return e

@timer
def sort_then_select(List, i):
    return _quicksort(List, 0, len(List)-1)[i-1]

def _quicksort(List, p, r):
    if p < r:
        q = random_partition(List, p, r)
        _quicksort(List, p, q - 1)
        _quicksort(List, q + 1, r)
    return List

print """Test 1: control input for debugging""" + '-' * 100
array = [18,5,100,3,1,19,6,0,7,4,2]
for i in range(1, len(array)+1):
    pt1 = randomized_select(array, i)
    print "%s:\t"% ordinal(i), pt1[0]
    plt.scatter(i, pt1[1], color='green')

for i in range(1, len(array)+1):
    pt2 = sort_then_select(array, i)
    print "%s:\t"% ordinal(i), pt2[0]
    plt.scatter(i, pt2[1], color='red')

plt.show()


print """Test 2: randomly generated test input for timing, size 100""" + '-' * 100
array = [-62, -32, 89, 72, -76, -11, 54, -32, -63, 12, 11, 60, 32, -27, 32, 17, -85, -49, -3, 27, -71, 52, -21, -49, 5, -12, 4, -67, 45, 54, -55, 84, 74, 78, -32, 23, 74, 73, 57, 81, -5, 98, 51, 18, 73, -90, 10, -71, 41, -93, -92, 36, -26, -94, -33, -75, 55, 55, 18, 29, -39, -15, -70, 85, -35, 20, 89, -93, -63, -46, 70, 60, -82, -86, 41, 40, 73, 38, 28, 35, -87, -72, 8, 7, -26, -97, 5, -44, 83, 66, -87, 82, 83, -65, 14, -87, 19, -78, 69, -4]
for i in range(1, len(array)+1):
    pt1 = randomized_select(array, i)
    print "%s:\t"% ordinal(i), pt1[0]
    plt.scatter(i, pt1[1], color='green')

for i in range(1, len(array)+1):
    pt2 = sort_then_select(array, i)
    print "%s:\t"% ordinal(i), pt2[0]
    plt.scatter(i, pt2[1], color='red')

plt.show()

print """Test 3: randomly generated test input for timing, size 1000""" + '-' * 100
array = [-35, 5, 46, 34, -1, -97, -73, -30, 33, -35, 97, -94, 22, 91, 62, -45, -45, 26, -5, -79, -24, -92, -28, 76, 40, 75, -5, -5, 11, -9, -70, -9, -65, 65, 59, 0, -61, -87, 34, 80, -43, -4, -99, 87, 66, 90, -83, -31, -92, 92, -80, -85, 34, -21, -15, 34, -76, -25, -61, -48, 90, 43, -31, 52, 21, 4, 48, 13, 88, -8, 75, -87, -32, -27, -28, -33, -92, -8, 63, 30, -66, 21, 94, -17, -45, -19, 19, -84, -84, -60, 86, 98, -64, -39, 3, 46, 60, -6, -75, 16, -84, 29, 48, 75, -13, 44, 98, 52, 93, 97, -74, -15, -67, -2, -17, 79, 71, 100, 49, 46, 63, 5, 30, -75, 19, -7, 25, 95, 96, 57, -88, -72, 69, 82, -12, 23, -78, -73, 55, -2, 8, -15, 49, 17, 2, 68, 98, 81, 91, 94, -98, -30, 79, -73, 78, -49, 65, 83, -46, -62, 28, -86, 46, -60, 61, 16, -83, -8, 83, 84, 70, 57, -44, -54, -7, -68, 9, 23, 41, 42, -73, -32, -83, -26, -37, 71, 93, 38, -16, 21, 10, -39, 46, -58, -81, 23, 51, -4, 72, -33, 58, -29, -81, 82, 47, -47, 70, -85, 68, -41, -74, -82, -85, 98, -90, 46, 64, 82, 24, -81, -94, -74, 76, -19, -59, 6, 96, -20, 90, -51, 10, -15, -73, -17, -58, 44, 48, -19, 91, 25, -4, 39, 35, -71, -20, -26, -1, 75, 86, 56, -55, -37, -46, 3, 100, -56, 82, -82, 24, 52, -47, -51, 94, -70, 71, -25, 36, 73, -30, -42, 8, -99, 34, -56, -20, 71, -1, -76, -70, 68, -85, 3, -22, 10, -60, 46, 64, -35, -37, -14, -39, 5, 82, -96, 68, -95, -68, 24, 92, -81, -62, -36, 36, 49, 42, -2, 95, 47, -94, -46, 49, -63, 39, 2, -68, -15, 42, -60, 42, 55, 59, 84, 53, -52, 99, -65, 16, 55, 23, 42, 99, 45, 53, 92, -79, -28, 17, 4, 31, -42, 67, 75, 53, -80, 19, -14, 91, -45, -21, 96, -18, -92, 13, 14, 73, -69, 11, -61, -13, 43, -32, 90, 38, 70, 76, -20, -54, -82, 42, 79, 76, -79, -47, -31, 32, 27, -75, 25, 38, -90, 81, -67, -76, 32, -41, 90, -29, 71, -97, -7, 69, 42, -91, -70, 48, 34, -16, 46, -78, -91, 2, 75, 32, -27, 0, -16, -68, 5, 71, 38, 89, 62, -1, -7, 79, -83, 10, -18, -47, -11, 26, 81, -93, 31, 57, -85, -65, -90, -51, -18, -58, 2, 18, 30, -32, -95, 61, -34, -70, -31, -81, -82, -54, 19, 94, 83, 61, 60, 4, -59, -7, -58, -47, -40, 17, -7, 62, -47, -18, -69, -2, 22, 16, 66, -21, -60, 89, -100, 54, 78, -11, 0, 50, -69, 64, -18, -35, 62, -87, -72, 26, 8, -93, -94, -81, 97, 91, -65, -57, -8, -81, 14, 20, -100, -68, -59, 32, 62, -68, 3, -99, -49, -70, -11, 58, 100, -67, 2, 46, 67, -93, -56, 75, 74, -80, 55, 37, 77, -23, 7, -48, 43, 21, -53, 39, 74, 54, -68, -19, -30, 53, -4, -6, -80, 66, 21, 88, -18, 93, -25, 39, -30, -52, -74, 25, 54, 3, 92, -98, 86, -36, -90, 46, 82, -97, 22, 43, -17, 92, 35, -67, -4, 95, 95, -90, 22, 89, 34, 60, 35, 52, 23, -52, -80, 33, 97, 20, 92, -94, -77, -69, -46, -94, -74, -89, 14, -44, -81, -85, -17, -4, -63, 43, -65, 68, -27, 75, 13, 82, 37, -20, 34, 56, 57, -8, 69, -38, 78, 80, -97, 23, -26, 13, -92, -90, -41, 2, 71, -83, -29, -37, -4, -10, -76, 98, -25, -35, -64, 71, 64, -5, -32, -35, -18, -48, 50, -8, -46, 0, 12, -95, -6, -35, -85, 93, -61, -26, 11, -92, -25, 32, 81, 8, 81, -66, -34, 15, -27, 37, 1, 4, -52, -81, 99, 71, -56, 38, 4, -51, -70, 2, -54, 33, 60, -72, 33, 88, 29, -6, 46, -1, 94, 56, 88, 97, -82, -64, -74, -40, 29, 6, -56, -35, -49, -95, -43, -34, -50, -94, 5, 51, -11, 50, -64, 88, -74, 71, 19, 1, -71, 43, -74, -59, 5, 12, 28, -51, -92, -17, -56, 26, -1, -41, 72, -23, 89, -17, 48, -65, -63, -74, -8, -88, -83, -43, 15, -71, 96, -50, 8, -39, 31, -17, 39, -43, 55, 65, -34, 9, -19, 53, -40, -5, 56, 85, -19, 70, 27, -84, -38, -6, 33, -19, 83, -48, -68, 95, 88, 10, 54, -34, -2, -80, 93, -45, 41, 34, 85, 68, -38, 48, 40, 95, -100, -98, 18, -39, 47, -30, -22, 13, -67, 53, -5, 51, -50, -85, -45, -31, -6, 10, -26, -13, -66, -92, 66, 40, 12, -47, -33, -25, -25, 17, -40, -77, -51, 69, -51, 8, -51, 28, 84, 79, 72, 33, 62, -36, -86, 82, -3, -25, 56, -7, 58, 38, 69, -97, 52, 84, -47, -77, 19, -74, -55, 85, 20, 30, 2, -93, 17, 20, -41, -9, -91, -76, 78, 29, -26, -99, -7, -88, 17, -29, 52, -71, 71, -93, 69, -31, 92, -63, 92, -96, 98, -44, -10, 71, 34, -53, -65, -70, 97, 92, 18, 19, -77, -79, -62, 74, -70, 43, -12, -47, 92, 24, 15, 67, -64, -20, -55, -67, 60, 56, 37, 13, 88, 69, 86, 12, -13, -71, 81, 42, -46, -36, -67, -71, 55, -69, -49, 14, -87, -17, -65, 83, 83, 31, -47, 5, 88, -3, -93, -85, -71, 85, -66, -32, 12, 92, -26, 34, 71, 3, -68, 29, -56, 18, 36, -2, 97, 38, -91, -97, 74, -100, -48, -90, -85, 6, -49, -5, -16, 6, -86, -6, 92, -7, -91, -38, 74, -37, 21, 2, -62, 41, 80, 74, 70, 52, -31, 53, 54, 78, -37, -52, 93, -4, -69, -13, 15, 49, -24, -91, 83, -82, -14, -26, 20, 63, -37]
for i in range(1, len(array)+1):
    pt1 = randomized_select(array, i)
    print "%s:\t"% ordinal(i), pt1[0]
    plt.scatter(i, pt1[1], color='green')

for i in range(1, len(array)+1):
    pt2 = sort_then_select(array, i)
    print "%s:\t"% ordinal(i), pt2[0]
    plt.scatter(i, pt2[1], color='red')

plt.show()
